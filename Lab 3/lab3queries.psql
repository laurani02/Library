-- 1 --

SELECT books.title, String_agg(genre.genre, ',' ) AS genre
FROM books LEFT JOIN genre ON books.bookid = genre.bookid
GROUP BY books.title
ORDER BY books.title;

-- 2 --

WITH borrowing_count AS (
    SELECT books.title, count(borrowing.borrowingid)
    FROM books
    LEFT JOIN resources ON resources.bookid = books.bookid
    LEFT JOIN borrowing ON borrowing.physicalid = resources.physicalid
    GROUP BY books.title)
SELECT books.title,
RANK ( ) OVER (
    ORDER BY count(borrowing.borrowingid) DESC
) rank 
FROM books LEFT JOIN genre ON genre.bookid = books.bookid 
LEFT JOIN resources ON resources.bookid = books.bookid
LEFT JOIN borrowing ON borrowing.physicalid = resources.physicalid
WHERE genre.genre = 'RomCom'
GROUP BY books.title
LIMIT 5;

-- 3 --

WITH late AS (
    SELECT date_part('week', DoR) AS week, COUNT(DoR) AS late
        FROM Borrowing
        WHERE DoR > DoE
        GROUP BY week
        ORDER BY week
),
returned AS (
    SELECT date_part('week', DoR) AS week, COUNT(DoR) as every
        FROM Borrowing
        GROUP BY week
        ORDER BY week
),
borrowed AS (
    SELECT date_part('week', DoB) AS week, COUNT(DoB) as borrowed
        FROM Borrowing
        GROUP BY week
        ORDER BY week
)
SELECT week, borrowed, every, late
    FROM ((late
        INNER JOIN returned USING(week))
        INNER JOIN borrowed USING(week))
    ORDER BY week
    LIMIT 29;

-- 4 --

SELECT books.title,
CASE WHEN prequels.prequelid IS NULL THEN 'f' ELSE 't' END AS every,
borrowing.dob
FROM books
INNER JOIN resources USING(bookid)
INNER JOIN borrowing USING(physicalid)
FULL OUTER JOIN prequels USING(bookid)
WHERE EXTRACT(MONTH FROM borrowing.dob) = 2
ORDER BY books.title COLLATE "C"

-- 5 -- 

WITH RECURSIVE preqid AS (
        SELECT books.title, books.bookid, prequels.prequelid
        FROM books
        INNER JOIN prequels USING(bookid)
        WHERE books.bookid = 8713 
    UNION ALL
        SELECT books.title, books.bookid, prequels.prequelid
        FROM books
        LEFT JOIN prequels USING(bookid)
        JOIN preqid ON books.bookid = preqid.prequelid
        GROUP BY books.title, books.bookid, prequels.prequelid
)
SELECT * FROM preqid;

-- P+ --
WITH RECURSIVE series as (
    SELECT books.bookid, books.title, concat(books.title), pages
    FROM books
    WHERE books.bookid IN (SELECT prequelid FROM prequels)
    AND books.bookid NOT IN (SELECT bookid FROM prequels)
    UNION
    SELECT books.bookID, books.title, concat(series.concat, ' -> ', books.title), books.pages + series.pages as pages
    FROM series
    INNER JOIN prequels 
    ON series.bookID = prequels.prequelID
    INNER JOIN books
    ON prequels.bookID = books.bookid
)
SELECT concat as series, pages
FROM series books
WHERE books.bookid NOT IN (SELECT prequelid from prequels);